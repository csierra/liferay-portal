/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.multi.factor.authentication.timebased.otp.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.multi.factor.authentication.timebased.otp.model.MFATimebasedOTPEntry;
import com.liferay.multi.factor.authentication.timebased.otp.model.MFATimebasedOTPEntryModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MFATimebasedOTPEntry service. Represents a row in the &quot;MFATimebasedOTPEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MFATimebasedOTPEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MFATimebasedOTPEntryImpl}.
 * </p>
 *
 * @author Arthur Chan
 * @see MFATimebasedOTPEntryImpl
 * @generated
 */
public class MFATimebasedOTPEntryModelImpl
	extends BaseModelImpl<MFATimebasedOTPEntry>
	implements MFATimebasedOTPEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mfa timebased otp entry model instance should use the <code>MFATimebasedOTPEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "MFATimebasedOTPEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"mfaTimebasedOTPEntryId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"failedAttempts", Types.INTEGER},
		{"lastFailDate", Types.TIMESTAMP}, {"lastFailIP", Types.VARCHAR},
		{"lastSuccessDate", Types.TIMESTAMP}, {"lastSuccessIP", Types.VARCHAR},
		{"sharedSecret", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mfaTimebasedOTPEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("failedAttempts", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("lastFailDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastFailIP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastSuccessDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastSuccessIP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sharedSecret", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table MFATimebasedOTPEntry (mvccVersion LONG default 0 not null,mfaTimebasedOTPEntryId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,failedAttempts INTEGER,lastFailDate DATE null,lastFailIP VARCHAR(75) null,lastSuccessDate DATE null,lastSuccessIP VARCHAR(75) null,sharedSecret VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table MFATimebasedOTPEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY mfaTimebasedOTPEntry.mfaTimebasedOTPEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY MFATimebasedOTPEntry.mfaTimebasedOTPEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long USERID_COLUMN_BITMASK = 1L;

	public static final long MFATIMEBASEDOTPENTRYID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public MFATimebasedOTPEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mfaTimebasedOTPEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMfaTimebasedOTPEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mfaTimebasedOTPEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MFATimebasedOTPEntry.class;
	}

	@Override
	public String getModelClassName() {
		return MFATimebasedOTPEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MFATimebasedOTPEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MFATimebasedOTPEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MFATimebasedOTPEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MFATimebasedOTPEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MFATimebasedOTPEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MFATimebasedOTPEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MFATimebasedOTPEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MFATimebasedOTPEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MFATimebasedOTPEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MFATimebasedOTPEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MFATimebasedOTPEntry.class.getClassLoader(),
			MFATimebasedOTPEntry.class, ModelWrapper.class);

		try {
			Constructor<MFATimebasedOTPEntry> constructor =
				(Constructor<MFATimebasedOTPEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MFATimebasedOTPEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MFATimebasedOTPEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MFATimebasedOTPEntry, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<MFATimebasedOTPEntry, Object>>();
		Map<String, BiConsumer<MFATimebasedOTPEntry, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<MFATimebasedOTPEntry, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", MFATimebasedOTPEntry::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<MFATimebasedOTPEntry, Long>)
				MFATimebasedOTPEntry::setMvccVersion);
		attributeGetterFunctions.put(
			"mfaTimebasedOTPEntryId",
			MFATimebasedOTPEntry::getMfaTimebasedOTPEntryId);
		attributeSetterBiConsumers.put(
			"mfaTimebasedOTPEntryId",
			(BiConsumer<MFATimebasedOTPEntry, Long>)
				MFATimebasedOTPEntry::setMfaTimebasedOTPEntryId);
		attributeGetterFunctions.put(
			"companyId", MFATimebasedOTPEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<MFATimebasedOTPEntry, Long>)
				MFATimebasedOTPEntry::setCompanyId);
		attributeGetterFunctions.put("userId", MFATimebasedOTPEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<MFATimebasedOTPEntry, Long>)
				MFATimebasedOTPEntry::setUserId);
		attributeGetterFunctions.put(
			"userName", MFATimebasedOTPEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<MFATimebasedOTPEntry, String>)
				MFATimebasedOTPEntry::setUserName);
		attributeGetterFunctions.put(
			"createDate", MFATimebasedOTPEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<MFATimebasedOTPEntry, Date>)
				MFATimebasedOTPEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", MFATimebasedOTPEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<MFATimebasedOTPEntry, Date>)
				MFATimebasedOTPEntry::setModifiedDate);
		attributeGetterFunctions.put(
			"failedAttempts", MFATimebasedOTPEntry::getFailedAttempts);
		attributeSetterBiConsumers.put(
			"failedAttempts",
			(BiConsumer<MFATimebasedOTPEntry, Integer>)
				MFATimebasedOTPEntry::setFailedAttempts);
		attributeGetterFunctions.put(
			"lastFailDate", MFATimebasedOTPEntry::getLastFailDate);
		attributeSetterBiConsumers.put(
			"lastFailDate",
			(BiConsumer<MFATimebasedOTPEntry, Date>)
				MFATimebasedOTPEntry::setLastFailDate);
		attributeGetterFunctions.put(
			"lastFailIP", MFATimebasedOTPEntry::getLastFailIP);
		attributeSetterBiConsumers.put(
			"lastFailIP",
			(BiConsumer<MFATimebasedOTPEntry, String>)
				MFATimebasedOTPEntry::setLastFailIP);
		attributeGetterFunctions.put(
			"lastSuccessDate", MFATimebasedOTPEntry::getLastSuccessDate);
		attributeSetterBiConsumers.put(
			"lastSuccessDate",
			(BiConsumer<MFATimebasedOTPEntry, Date>)
				MFATimebasedOTPEntry::setLastSuccessDate);
		attributeGetterFunctions.put(
			"lastSuccessIP", MFATimebasedOTPEntry::getLastSuccessIP);
		attributeSetterBiConsumers.put(
			"lastSuccessIP",
			(BiConsumer<MFATimebasedOTPEntry, String>)
				MFATimebasedOTPEntry::setLastSuccessIP);
		attributeGetterFunctions.put(
			"sharedSecret", MFATimebasedOTPEntry::getSharedSecret);
		attributeSetterBiConsumers.put(
			"sharedSecret",
			(BiConsumer<MFATimebasedOTPEntry, String>)
				MFATimebasedOTPEntry::setSharedSecret);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@Override
	public long getMfaTimebasedOTPEntryId() {
		return _mfaTimebasedOTPEntryId;
	}

	@Override
	public void setMfaTimebasedOTPEntryId(long mfaTimebasedOTPEntryId) {
		_mfaTimebasedOTPEntryId = mfaTimebasedOTPEntryId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getFailedAttempts() {
		return _failedAttempts;
	}

	@Override
	public void setFailedAttempts(int failedAttempts) {
		_failedAttempts = failedAttempts;
	}

	@Override
	public Date getLastFailDate() {
		return _lastFailDate;
	}

	@Override
	public void setLastFailDate(Date lastFailDate) {
		_lastFailDate = lastFailDate;
	}

	@Override
	public String getLastFailIP() {
		if (_lastFailIP == null) {
			return "";
		}
		else {
			return _lastFailIP;
		}
	}

	@Override
	public void setLastFailIP(String lastFailIP) {
		_lastFailIP = lastFailIP;
	}

	@Override
	public Date getLastSuccessDate() {
		return _lastSuccessDate;
	}

	@Override
	public void setLastSuccessDate(Date lastSuccessDate) {
		_lastSuccessDate = lastSuccessDate;
	}

	@Override
	public String getLastSuccessIP() {
		if (_lastSuccessIP == null) {
			return "";
		}
		else {
			return _lastSuccessIP;
		}
	}

	@Override
	public void setLastSuccessIP(String lastSuccessIP) {
		_lastSuccessIP = lastSuccessIP;
	}

	@Override
	public String getSharedSecret() {
		if (_sharedSecret == null) {
			return "";
		}
		else {
			return _sharedSecret;
		}
	}

	@Override
	public void setSharedSecret(String sharedSecret) {
		_sharedSecret = sharedSecret;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MFATimebasedOTPEntry.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MFATimebasedOTPEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MFATimebasedOTPEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MFATimebasedOTPEntryImpl mfaTimebasedOTPEntryImpl =
			new MFATimebasedOTPEntryImpl();

		mfaTimebasedOTPEntryImpl.setMvccVersion(getMvccVersion());
		mfaTimebasedOTPEntryImpl.setMfaTimebasedOTPEntryId(
			getMfaTimebasedOTPEntryId());
		mfaTimebasedOTPEntryImpl.setCompanyId(getCompanyId());
		mfaTimebasedOTPEntryImpl.setUserId(getUserId());
		mfaTimebasedOTPEntryImpl.setUserName(getUserName());
		mfaTimebasedOTPEntryImpl.setCreateDate(getCreateDate());
		mfaTimebasedOTPEntryImpl.setModifiedDate(getModifiedDate());
		mfaTimebasedOTPEntryImpl.setFailedAttempts(getFailedAttempts());
		mfaTimebasedOTPEntryImpl.setLastFailDate(getLastFailDate());
		mfaTimebasedOTPEntryImpl.setLastFailIP(getLastFailIP());
		mfaTimebasedOTPEntryImpl.setLastSuccessDate(getLastSuccessDate());
		mfaTimebasedOTPEntryImpl.setLastSuccessIP(getLastSuccessIP());
		mfaTimebasedOTPEntryImpl.setSharedSecret(getSharedSecret());

		mfaTimebasedOTPEntryImpl.resetOriginalValues();

		return mfaTimebasedOTPEntryImpl;
	}

	@Override
	public int compareTo(MFATimebasedOTPEntry mfaTimebasedOTPEntry) {
		long primaryKey = mfaTimebasedOTPEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MFATimebasedOTPEntry)) {
			return false;
		}

		MFATimebasedOTPEntry mfaTimebasedOTPEntry = (MFATimebasedOTPEntry)obj;

		long primaryKey = mfaTimebasedOTPEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		MFATimebasedOTPEntryModelImpl mfaTimebasedOTPEntryModelImpl = this;

		mfaTimebasedOTPEntryModelImpl._originalUserId =
			mfaTimebasedOTPEntryModelImpl._userId;

		mfaTimebasedOTPEntryModelImpl._setOriginalUserId = false;

		mfaTimebasedOTPEntryModelImpl._setModifiedDate = false;

		mfaTimebasedOTPEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MFATimebasedOTPEntry> toCacheModel() {
		MFATimebasedOTPEntryCacheModel mfaTimebasedOTPEntryCacheModel =
			new MFATimebasedOTPEntryCacheModel();

		mfaTimebasedOTPEntryCacheModel.mvccVersion = getMvccVersion();

		mfaTimebasedOTPEntryCacheModel.mfaTimebasedOTPEntryId =
			getMfaTimebasedOTPEntryId();

		mfaTimebasedOTPEntryCacheModel.companyId = getCompanyId();

		mfaTimebasedOTPEntryCacheModel.userId = getUserId();

		mfaTimebasedOTPEntryCacheModel.userName = getUserName();

		String userName = mfaTimebasedOTPEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			mfaTimebasedOTPEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			mfaTimebasedOTPEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			mfaTimebasedOTPEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			mfaTimebasedOTPEntryCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			mfaTimebasedOTPEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		mfaTimebasedOTPEntryCacheModel.failedAttempts = getFailedAttempts();

		Date lastFailDate = getLastFailDate();

		if (lastFailDate != null) {
			mfaTimebasedOTPEntryCacheModel.lastFailDate =
				lastFailDate.getTime();
		}
		else {
			mfaTimebasedOTPEntryCacheModel.lastFailDate = Long.MIN_VALUE;
		}

		mfaTimebasedOTPEntryCacheModel.lastFailIP = getLastFailIP();

		String lastFailIP = mfaTimebasedOTPEntryCacheModel.lastFailIP;

		if ((lastFailIP != null) && (lastFailIP.length() == 0)) {
			mfaTimebasedOTPEntryCacheModel.lastFailIP = null;
		}

		Date lastSuccessDate = getLastSuccessDate();

		if (lastSuccessDate != null) {
			mfaTimebasedOTPEntryCacheModel.lastSuccessDate =
				lastSuccessDate.getTime();
		}
		else {
			mfaTimebasedOTPEntryCacheModel.lastSuccessDate = Long.MIN_VALUE;
		}

		mfaTimebasedOTPEntryCacheModel.lastSuccessIP = getLastSuccessIP();

		String lastSuccessIP = mfaTimebasedOTPEntryCacheModel.lastSuccessIP;

		if ((lastSuccessIP != null) && (lastSuccessIP.length() == 0)) {
			mfaTimebasedOTPEntryCacheModel.lastSuccessIP = null;
		}

		mfaTimebasedOTPEntryCacheModel.sharedSecret = getSharedSecret();

		String sharedSecret = mfaTimebasedOTPEntryCacheModel.sharedSecret;

		if ((sharedSecret != null) && (sharedSecret.length() == 0)) {
			mfaTimebasedOTPEntryCacheModel.sharedSecret = null;
		}

		return mfaTimebasedOTPEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MFATimebasedOTPEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MFATimebasedOTPEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MFATimebasedOTPEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((MFATimebasedOTPEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MFATimebasedOTPEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MFATimebasedOTPEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MFATimebasedOTPEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((MFATimebasedOTPEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MFATimebasedOTPEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private long _mfaTimebasedOTPEntryId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _failedAttempts;
	private Date _lastFailDate;
	private String _lastFailIP;
	private Date _lastSuccessDate;
	private String _lastSuccessIP;
	private String _sharedSecret;
	private long _columnBitmask;
	private MFATimebasedOTPEntry _escapedModel;

}