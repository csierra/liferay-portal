/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.multi.factor.authentication.test.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.multi.factor.authentication.test.model.MFATestEntry;
import com.liferay.multi.factor.authentication.test.model.MFATestEntryModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.persistence.impl.UserInputString;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MFATestEntry service. Represents a row in the &quot;MFATestEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MFATestEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MFATestEntryImpl}.
 * </p>
 *
 * @author Arthur Chan
 * @see MFATestEntryImpl
 * @generated
 */
public class MFATestEntryModelImpl
	extends BaseModelImpl<MFATestEntry> implements MFATestEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mfa test entry model instance should use the <code>MFATestEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "MFATestEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"mfaTestEntryId", Types.BIGINT},
		{"testString", Types.VARCHAR}, {"testUserInputString", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mfaTestEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("testString", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testUserInputString", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table MFATestEntry (mvccVersion LONG default 0 not null,mfaTestEntryId LONG not null primary key,testString VARCHAR(75) null,testUserInputString invalid)";

	public static final String TABLE_SQL_DROP = "drop table MFATestEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY mfaTestEntry.mfaTestEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY MFATestEntry.mfaTestEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long MFATESTENTRYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MFATestEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mfaTestEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMfaTestEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mfaTestEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MFATestEntry.class;
	}

	@Override
	public String getModelClassName() {
		return MFATestEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MFATestEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MFATestEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MFATestEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MFATestEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MFATestEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MFATestEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MFATestEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MFATestEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MFATestEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MFATestEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MFATestEntry.class.getClassLoader(), MFATestEntry.class,
			ModelWrapper.class);

		try {
			Constructor<MFATestEntry> constructor =
				(Constructor<MFATestEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MFATestEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MFATestEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MFATestEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MFATestEntry, Object>>();
		Map<String, BiConsumer<MFATestEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MFATestEntry, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", MFATestEntry::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<MFATestEntry, Long>)MFATestEntry::setMvccVersion);
		attributeGetterFunctions.put(
			"mfaTestEntryId", MFATestEntry::getMfaTestEntryId);
		attributeSetterBiConsumers.put(
			"mfaTestEntryId",
			(BiConsumer<MFATestEntry, Long>)MFATestEntry::setMfaTestEntryId);
		attributeGetterFunctions.put("testString", MFATestEntry::getTestString);
		attributeSetterBiConsumers.put(
			"testString",
			(BiConsumer<MFATestEntry, String>)MFATestEntry::setTestString);
		attributeGetterFunctions.put(
			"testUserInputString", MFATestEntry::getTestUserInputString);
		attributeSetterBiConsumers.put(
			"testUserInputString",
			(MFATestEntry entity, String s) -> entity.setTestUserInputString(
				new UserInputString(s)));

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@Override
	public long getMfaTestEntryId() {
		return _mfaTestEntryId;
	}

	@Override
	public void setMfaTestEntryId(long mfaTestEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mfaTestEntryId = mfaTestEntryId;
	}

	@Override
	public String getTestString() {
		if (_testString == null) {
			return "";
		}
		else {
			return _testString;
		}
	}

	@Override
	public void setTestString(String testString) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testString = testString;
	}

	@Override
	public UserInputString getTestUserInputString() {
		return _testUserInputString;
	}

	@Override
	public void setTestUserInputString(UserInputString testUserInputString) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testUserInputString = testUserInputString;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, MFATestEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MFATestEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MFATestEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MFATestEntryImpl mfaTestEntryImpl = new MFATestEntryImpl();

		mfaTestEntryImpl.setMvccVersion(getMvccVersion());
		mfaTestEntryImpl.setMfaTestEntryId(getMfaTestEntryId());
		mfaTestEntryImpl.setTestString(getTestString());
		mfaTestEntryImpl.setTestUserInputString(getTestUserInputString());

		mfaTestEntryImpl.resetOriginalValues();

		return mfaTestEntryImpl;
	}

	@Override
	public int compareTo(MFATestEntry mfaTestEntry) {
		long primaryKey = mfaTestEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MFATestEntry)) {
			return false;
		}

		MFATestEntry mfaTestEntry = (MFATestEntry)object;

		long primaryKey = mfaTestEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MFATestEntry> toCacheModel() {
		MFATestEntryCacheModel mfaTestEntryCacheModel =
			new MFATestEntryCacheModel();

		mfaTestEntryCacheModel.mvccVersion = getMvccVersion();

		mfaTestEntryCacheModel.mfaTestEntryId = getMfaTestEntryId();

		mfaTestEntryCacheModel.testString = getTestString();

		String testString = mfaTestEntryCacheModel.testString;

		if ((testString != null) && (testString.length() == 0)) {
			mfaTestEntryCacheModel.testString = null;
		}

		mfaTestEntryCacheModel.testUserInputString = getTestUserInputString();

		return mfaTestEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MFATestEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MFATestEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MFATestEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((MFATestEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MFATestEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MFATestEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MFATestEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MFATestEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MFATestEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _mvccVersion;
	private long _mfaTestEntryId;
	private String _testString;
	private UserInputString _testUserInputString;

	public <T> T getColumnValue(String columnName) {
		Function<MFATestEntry, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MFATestEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("mfaTestEntryId", _mfaTestEntryId);
		_columnOriginalValues.put("testString", _testString);
		_columnOriginalValues.put("testUserInputString", _testUserInputString);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("mfaTestEntryId", 2L);

		columnBitmasks.put("testString", 4L);

		columnBitmasks.put("testUserInputString", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MFATestEntry _escapedModel;

}