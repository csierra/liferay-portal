/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.oauth2.provider.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.oauth2.provider.model.OAuth2ScopeGrant;
import com.liferay.oauth2.provider.model.OAuth2ScopeGrantModel;
import com.liferay.oauth2.provider.service.persistence.OAuth2ScopeGrantPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OAuth2ScopeGrant service. Represents a row in the &quot;OAuth2ScopeGrant&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link OAuth2ScopeGrantModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OAuth2ScopeGrantImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OAuth2ScopeGrantImpl
 * @see OAuth2ScopeGrant
 * @see OAuth2ScopeGrantModel
 * @generated
 */
@ProviderType
public class OAuth2ScopeGrantModelImpl extends BaseModelImpl<OAuth2ScopeGrant>
	implements OAuth2ScopeGrantModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a o auth2 scope grant model instance should use the {@link OAuth2ScopeGrant} interface instead.
	 */
	public static final String TABLE_NAME = "OAuth2ScopeGrant";
	public static final Object[][] TABLE_COLUMNS = {
			{ "applicationName", Types.VARCHAR },
			{ "bundleSymbolicName", Types.VARCHAR },
			{ "bundleVersion", Types.VARCHAR },
			{ "oAuth2ScopeName", Types.VARCHAR },
			{ "oAuth2TokenId", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("applicationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bundleSymbolicName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bundleVersion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oAuth2ScopeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oAuth2TokenId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table OAuth2ScopeGrant (applicationName VARCHAR(75) not null,bundleSymbolicName VARCHAR(75) not null,bundleVersion VARCHAR(75) not null,oAuth2ScopeName VARCHAR(75) not null,oAuth2TokenId VARCHAR(75) not null,companyId LONG,createDate DATE null,primary key (applicationName, bundleSymbolicName, bundleVersion, oAuth2ScopeName, oAuth2TokenId))";
	public static final String TABLE_SQL_DROP = "drop table OAuth2ScopeGrant";
	public static final String ORDER_BY_JPQL = " ORDER BY oAuth2ScopeGrant.id.applicationName ASC, oAuth2ScopeGrant.id.bundleSymbolicName ASC, oAuth2ScopeGrant.id.bundleVersion ASC, oAuth2ScopeGrant.id.oAuth2ScopeName ASC, oAuth2ScopeGrant.id.oAuth2TokenId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OAuth2ScopeGrant.applicationName ASC, OAuth2ScopeGrant.bundleSymbolicName ASC, OAuth2ScopeGrant.bundleVersion ASC, OAuth2ScopeGrant.oAuth2ScopeName ASC, OAuth2ScopeGrant.oAuth2TokenId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.oauth2.provider.model.OAuth2ScopeGrant"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.oauth2.provider.model.OAuth2ScopeGrant"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.oauth2.provider.model.OAuth2ScopeGrant"),
			true);
	public static final long OAUTH2TOKENID_COLUMN_BITMASK = 1L;
	public static final long APPLICATIONNAME_COLUMN_BITMASK = 2L;
	public static final long BUNDLESYMBOLICNAME_COLUMN_BITMASK = 4L;
	public static final long BUNDLEVERSION_COLUMN_BITMASK = 8L;
	public static final long OAUTH2SCOPENAME_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.oauth2.provider.model.OAuth2ScopeGrant"));

	public OAuth2ScopeGrantModelImpl() {
	}

	@Override
	public OAuth2ScopeGrantPK getPrimaryKey() {
		return new OAuth2ScopeGrantPK(_applicationName, _bundleSymbolicName,
			_bundleVersion, _oAuth2ScopeName, _oAuth2TokenId);
	}

	@Override
	public void setPrimaryKey(OAuth2ScopeGrantPK primaryKey) {
		setApplicationName(primaryKey.applicationName);
		setBundleSymbolicName(primaryKey.bundleSymbolicName);
		setBundleVersion(primaryKey.bundleVersion);
		setOAuth2ScopeName(primaryKey.oAuth2ScopeName);
		setOAuth2TokenId(primaryKey.oAuth2TokenId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new OAuth2ScopeGrantPK(_applicationName, _bundleSymbolicName,
			_bundleVersion, _oAuth2ScopeName, _oAuth2TokenId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((OAuth2ScopeGrantPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return OAuth2ScopeGrant.class;
	}

	@Override
	public String getModelClassName() {
		return OAuth2ScopeGrant.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("applicationName", getApplicationName());
		attributes.put("bundleSymbolicName", getBundleSymbolicName());
		attributes.put("bundleVersion", getBundleVersion());
		attributes.put("oAuth2ScopeName", getOAuth2ScopeName());
		attributes.put("oAuth2TokenId", getOAuth2TokenId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String applicationName = (String)attributes.get("applicationName");

		if (applicationName != null) {
			setApplicationName(applicationName);
		}

		String bundleSymbolicName = (String)attributes.get("bundleSymbolicName");

		if (bundleSymbolicName != null) {
			setBundleSymbolicName(bundleSymbolicName);
		}

		String bundleVersion = (String)attributes.get("bundleVersion");

		if (bundleVersion != null) {
			setBundleVersion(bundleVersion);
		}

		String oAuth2ScopeName = (String)attributes.get("oAuth2ScopeName");

		if (oAuth2ScopeName != null) {
			setOAuth2ScopeName(oAuth2ScopeName);
		}

		String oAuth2TokenId = (String)attributes.get("oAuth2TokenId");

		if (oAuth2TokenId != null) {
			setOAuth2TokenId(oAuth2TokenId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@Override
	public String getApplicationName() {
		if (_applicationName == null) {
			return "";
		}
		else {
			return _applicationName;
		}
	}

	@Override
	public void setApplicationName(String applicationName) {
		_applicationName = applicationName;
	}

	@Override
	public String getBundleSymbolicName() {
		if (_bundleSymbolicName == null) {
			return "";
		}
		else {
			return _bundleSymbolicName;
		}
	}

	@Override
	public void setBundleSymbolicName(String bundleSymbolicName) {
		_bundleSymbolicName = bundleSymbolicName;
	}

	@Override
	public String getBundleVersion() {
		if (_bundleVersion == null) {
			return "";
		}
		else {
			return _bundleVersion;
		}
	}

	@Override
	public void setBundleVersion(String bundleVersion) {
		_bundleVersion = bundleVersion;
	}

	@Override
	public String getOAuth2ScopeName() {
		if (_oAuth2ScopeName == null) {
			return "";
		}
		else {
			return _oAuth2ScopeName;
		}
	}

	@Override
	public void setOAuth2ScopeName(String oAuth2ScopeName) {
		_oAuth2ScopeName = oAuth2ScopeName;
	}

	@Override
	public String getOAuth2TokenId() {
		if (_oAuth2TokenId == null) {
			return "";
		}
		else {
			return _oAuth2TokenId;
		}
	}

	@Override
	public void setOAuth2TokenId(String oAuth2TokenId) {
		_columnBitmask |= OAUTH2TOKENID_COLUMN_BITMASK;

		if (_originalOAuth2TokenId == null) {
			_originalOAuth2TokenId = _oAuth2TokenId;
		}

		_oAuth2TokenId = oAuth2TokenId;
	}

	public String getOriginalOAuth2TokenId() {
		return GetterUtil.getString(_originalOAuth2TokenId);
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public OAuth2ScopeGrant toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OAuth2ScopeGrant)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OAuth2ScopeGrantImpl oAuth2ScopeGrantImpl = new OAuth2ScopeGrantImpl();

		oAuth2ScopeGrantImpl.setApplicationName(getApplicationName());
		oAuth2ScopeGrantImpl.setBundleSymbolicName(getBundleSymbolicName());
		oAuth2ScopeGrantImpl.setBundleVersion(getBundleVersion());
		oAuth2ScopeGrantImpl.setOAuth2ScopeName(getOAuth2ScopeName());
		oAuth2ScopeGrantImpl.setOAuth2TokenId(getOAuth2TokenId());
		oAuth2ScopeGrantImpl.setCompanyId(getCompanyId());
		oAuth2ScopeGrantImpl.setCreateDate(getCreateDate());

		oAuth2ScopeGrantImpl.resetOriginalValues();

		return oAuth2ScopeGrantImpl;
	}

	@Override
	public int compareTo(OAuth2ScopeGrant oAuth2ScopeGrant) {
		OAuth2ScopeGrantPK primaryKey = oAuth2ScopeGrant.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OAuth2ScopeGrant)) {
			return false;
		}

		OAuth2ScopeGrant oAuth2ScopeGrant = (OAuth2ScopeGrant)obj;

		OAuth2ScopeGrantPK primaryKey = oAuth2ScopeGrant.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		OAuth2ScopeGrantModelImpl oAuth2ScopeGrantModelImpl = this;

		oAuth2ScopeGrantModelImpl._originalOAuth2TokenId = oAuth2ScopeGrantModelImpl._oAuth2TokenId;

		oAuth2ScopeGrantModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OAuth2ScopeGrant> toCacheModel() {
		OAuth2ScopeGrantCacheModel oAuth2ScopeGrantCacheModel = new OAuth2ScopeGrantCacheModel();

		oAuth2ScopeGrantCacheModel.oAuth2ScopeGrantPK = getPrimaryKey();

		oAuth2ScopeGrantCacheModel.applicationName = getApplicationName();

		String applicationName = oAuth2ScopeGrantCacheModel.applicationName;

		if ((applicationName != null) && (applicationName.length() == 0)) {
			oAuth2ScopeGrantCacheModel.applicationName = null;
		}

		oAuth2ScopeGrantCacheModel.bundleSymbolicName = getBundleSymbolicName();

		String bundleSymbolicName = oAuth2ScopeGrantCacheModel.bundleSymbolicName;

		if ((bundleSymbolicName != null) && (bundleSymbolicName.length() == 0)) {
			oAuth2ScopeGrantCacheModel.bundleSymbolicName = null;
		}

		oAuth2ScopeGrantCacheModel.bundleVersion = getBundleVersion();

		String bundleVersion = oAuth2ScopeGrantCacheModel.bundleVersion;

		if ((bundleVersion != null) && (bundleVersion.length() == 0)) {
			oAuth2ScopeGrantCacheModel.bundleVersion = null;
		}

		oAuth2ScopeGrantCacheModel.oAuth2ScopeName = getOAuth2ScopeName();

		String oAuth2ScopeName = oAuth2ScopeGrantCacheModel.oAuth2ScopeName;

		if ((oAuth2ScopeName != null) && (oAuth2ScopeName.length() == 0)) {
			oAuth2ScopeGrantCacheModel.oAuth2ScopeName = null;
		}

		oAuth2ScopeGrantCacheModel.oAuth2TokenId = getOAuth2TokenId();

		String oAuth2TokenId = oAuth2ScopeGrantCacheModel.oAuth2TokenId;

		if ((oAuth2TokenId != null) && (oAuth2TokenId.length() == 0)) {
			oAuth2ScopeGrantCacheModel.oAuth2TokenId = null;
		}

		oAuth2ScopeGrantCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			oAuth2ScopeGrantCacheModel.createDate = createDate.getTime();
		}
		else {
			oAuth2ScopeGrantCacheModel.createDate = Long.MIN_VALUE;
		}

		return oAuth2ScopeGrantCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{applicationName=");
		sb.append(getApplicationName());
		sb.append(", bundleSymbolicName=");
		sb.append(getBundleSymbolicName());
		sb.append(", bundleVersion=");
		sb.append(getBundleVersion());
		sb.append(", oAuth2ScopeName=");
		sb.append(getOAuth2ScopeName());
		sb.append(", oAuth2TokenId=");
		sb.append(getOAuth2TokenId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.oauth2.provider.model.OAuth2ScopeGrant");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>applicationName</column-name><column-value><![CDATA[");
		sb.append(getApplicationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bundleSymbolicName</column-name><column-value><![CDATA[");
		sb.append(getBundleSymbolicName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bundleVersion</column-name><column-value><![CDATA[");
		sb.append(getBundleVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oAuth2ScopeName</column-name><column-value><![CDATA[");
		sb.append(getOAuth2ScopeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oAuth2TokenId</column-name><column-value><![CDATA[");
		sb.append(getOAuth2TokenId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = OAuth2ScopeGrant.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			OAuth2ScopeGrant.class
		};
	private String _applicationName;
	private String _bundleSymbolicName;
	private String _bundleVersion;
	private String _oAuth2ScopeName;
	private String _oAuth2TokenId;
	private String _originalOAuth2TokenId;
	private long _companyId;
	private Date _createDate;
	private long _columnBitmask;
	private OAuth2ScopeGrant _escapedModel;
}