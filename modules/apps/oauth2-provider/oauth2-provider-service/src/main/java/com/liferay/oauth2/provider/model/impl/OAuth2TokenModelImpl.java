/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.oauth2.provider.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.oauth2.provider.model.OAuth2Token;
import com.liferay.oauth2.provider.model.OAuth2TokenModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OAuth2Token service. Represents a row in the &quot;OAuth2Token&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link OAuth2TokenModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OAuth2TokenImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OAuth2TokenImpl
 * @see OAuth2Token
 * @see OAuth2TokenModel
 * @generated
 */
@ProviderType
public class OAuth2TokenModelImpl extends BaseModelImpl<OAuth2Token>
	implements OAuth2TokenModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a o auth2 token model instance should use the {@link OAuth2Token} interface instead.
	 */
	public static final String TABLE_NAME = "OAuth2Token";
	public static final Object[][] TABLE_COLUMNS = {
			{ "oAuth2TokenId", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "oAuth2ApplicationId", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("oAuth2TokenId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("oAuth2ApplicationId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table OAuth2Token (oAuth2TokenId VARCHAR(75) not null primary key,companyId LONG,createDate DATE null,oAuth2ApplicationId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table OAuth2Token";
	public static final String ORDER_BY_JPQL = " ORDER BY oAuth2Token.oAuth2TokenId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OAuth2Token.oAuth2TokenId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.oauth2.provider.model.OAuth2Token"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.oauth2.provider.model.OAuth2Token"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.oauth2.provider.model.OAuth2Token"),
			true);
	public static final long OAUTH2APPLICATIONID_COLUMN_BITMASK = 1L;
	public static final long OAUTH2TOKENID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.oauth2.provider.model.OAuth2Token"));

	public OAuth2TokenModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _oAuth2TokenId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setOAuth2TokenId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _oAuth2TokenId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return OAuth2Token.class;
	}

	@Override
	public String getModelClassName() {
		return OAuth2Token.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("oAuth2TokenId", getOAuth2TokenId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("oAuth2ApplicationId", getOAuth2ApplicationId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String oAuth2TokenId = (String)attributes.get("oAuth2TokenId");

		if (oAuth2TokenId != null) {
			setOAuth2TokenId(oAuth2TokenId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String oAuth2ApplicationId = (String)attributes.get(
				"oAuth2ApplicationId");

		if (oAuth2ApplicationId != null) {
			setOAuth2ApplicationId(oAuth2ApplicationId);
		}
	}

	@Override
	public String getOAuth2TokenId() {
		if (_oAuth2TokenId == null) {
			return "";
		}
		else {
			return _oAuth2TokenId;
		}
	}

	@Override
	public void setOAuth2TokenId(String oAuth2TokenId) {
		_oAuth2TokenId = oAuth2TokenId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public String getOAuth2ApplicationId() {
		if (_oAuth2ApplicationId == null) {
			return "";
		}
		else {
			return _oAuth2ApplicationId;
		}
	}

	@Override
	public void setOAuth2ApplicationId(String oAuth2ApplicationId) {
		_columnBitmask |= OAUTH2APPLICATIONID_COLUMN_BITMASK;

		if (_originalOAuth2ApplicationId == null) {
			_originalOAuth2ApplicationId = _oAuth2ApplicationId;
		}

		_oAuth2ApplicationId = oAuth2ApplicationId;
	}

	public String getOriginalOAuth2ApplicationId() {
		return GetterUtil.getString(_originalOAuth2ApplicationId);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public OAuth2Token toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OAuth2Token)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OAuth2TokenImpl oAuth2TokenImpl = new OAuth2TokenImpl();

		oAuth2TokenImpl.setOAuth2TokenId(getOAuth2TokenId());
		oAuth2TokenImpl.setCompanyId(getCompanyId());
		oAuth2TokenImpl.setCreateDate(getCreateDate());
		oAuth2TokenImpl.setOAuth2ApplicationId(getOAuth2ApplicationId());

		oAuth2TokenImpl.resetOriginalValues();

		return oAuth2TokenImpl;
	}

	@Override
	public int compareTo(OAuth2Token oAuth2Token) {
		String primaryKey = oAuth2Token.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OAuth2Token)) {
			return false;
		}

		OAuth2Token oAuth2Token = (OAuth2Token)obj;

		String primaryKey = oAuth2Token.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		OAuth2TokenModelImpl oAuth2TokenModelImpl = this;

		oAuth2TokenModelImpl._originalOAuth2ApplicationId = oAuth2TokenModelImpl._oAuth2ApplicationId;

		oAuth2TokenModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OAuth2Token> toCacheModel() {
		OAuth2TokenCacheModel oAuth2TokenCacheModel = new OAuth2TokenCacheModel();

		oAuth2TokenCacheModel.oAuth2TokenId = getOAuth2TokenId();

		String oAuth2TokenId = oAuth2TokenCacheModel.oAuth2TokenId;

		if ((oAuth2TokenId != null) && (oAuth2TokenId.length() == 0)) {
			oAuth2TokenCacheModel.oAuth2TokenId = null;
		}

		oAuth2TokenCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			oAuth2TokenCacheModel.createDate = createDate.getTime();
		}
		else {
			oAuth2TokenCacheModel.createDate = Long.MIN_VALUE;
		}

		oAuth2TokenCacheModel.oAuth2ApplicationId = getOAuth2ApplicationId();

		String oAuth2ApplicationId = oAuth2TokenCacheModel.oAuth2ApplicationId;

		if ((oAuth2ApplicationId != null) &&
				(oAuth2ApplicationId.length() == 0)) {
			oAuth2TokenCacheModel.oAuth2ApplicationId = null;
		}

		return oAuth2TokenCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{oAuth2TokenId=");
		sb.append(getOAuth2TokenId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", oAuth2ApplicationId=");
		sb.append(getOAuth2ApplicationId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.oauth2.provider.model.OAuth2Token");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>oAuth2TokenId</column-name><column-value><![CDATA[");
		sb.append(getOAuth2TokenId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oAuth2ApplicationId</column-name><column-value><![CDATA[");
		sb.append(getOAuth2ApplicationId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = OAuth2Token.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			OAuth2Token.class
		};
	private String _oAuth2TokenId;
	private long _companyId;
	private Date _createDate;
	private String _oAuth2ApplicationId;
	private String _originalOAuth2ApplicationId;
	private long _columnBitmask;
	private OAuth2Token _escapedModel;
}