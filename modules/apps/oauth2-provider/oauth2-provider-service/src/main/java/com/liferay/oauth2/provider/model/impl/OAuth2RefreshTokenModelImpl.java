/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.oauth2.provider.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.oauth2.provider.model.OAuth2RefreshToken;
import com.liferay.oauth2.provider.model.OAuth2RefreshTokenModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OAuth2RefreshToken service. Represents a row in the &quot;OAuth2RefreshToken&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link OAuth2RefreshTokenModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OAuth2RefreshTokenImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OAuth2RefreshTokenImpl
 * @see OAuth2RefreshToken
 * @see OAuth2RefreshTokenModel
 * @generated
 */
@ProviderType
public class OAuth2RefreshTokenModelImpl extends BaseModelImpl<OAuth2RefreshToken>
	implements OAuth2RefreshTokenModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a o auth2 refresh token model instance should use the {@link OAuth2RefreshToken} interface instead.
	 */
	public static final String TABLE_NAME = "OAuth2RefreshToken";
	public static final Object[][] TABLE_COLUMNS = {
			{ "oAuth2RefreshTokenId", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "lifeTime", Types.BIGINT },
			{ "oAuth2ApplicationId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("oAuth2RefreshTokenId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lifeTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("oAuth2ApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table OAuth2RefreshToken (oAuth2RefreshTokenId VARCHAR(75) not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,lifeTime LONG,oAuth2ApplicationId LONG)";
	public static final String TABLE_SQL_DROP = "drop table OAuth2RefreshToken";
	public static final String ORDER_BY_JPQL = " ORDER BY oAuth2RefreshToken.oAuth2RefreshTokenId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OAuth2RefreshToken.oAuth2RefreshTokenId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.oauth2.provider.model.OAuth2RefreshToken"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.oauth2.provider.model.OAuth2RefreshToken"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.oauth2.provider.model.OAuth2RefreshToken"),
			true);
	public static final long OAUTH2APPLICATIONID_COLUMN_BITMASK = 1L;
	public static final long USERNAME_COLUMN_BITMASK = 2L;
	public static final long OAUTH2REFRESHTOKENID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.oauth2.provider.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.oauth2.provider.model.OAuth2RefreshToken"));

	public OAuth2RefreshTokenModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _oAuth2RefreshTokenId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setOAuth2RefreshTokenId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _oAuth2RefreshTokenId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return OAuth2RefreshToken.class;
	}

	@Override
	public String getModelClassName() {
		return OAuth2RefreshToken.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("oAuth2RefreshTokenId", getOAuth2RefreshTokenId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("lifeTime", getLifeTime());
		attributes.put("oAuth2ApplicationId", getOAuth2ApplicationId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String oAuth2RefreshTokenId = (String)attributes.get(
				"oAuth2RefreshTokenId");

		if (oAuth2RefreshTokenId != null) {
			setOAuth2RefreshTokenId(oAuth2RefreshTokenId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long lifeTime = (Long)attributes.get("lifeTime");

		if (lifeTime != null) {
			setLifeTime(lifeTime);
		}

		Long oAuth2ApplicationId = (Long)attributes.get("oAuth2ApplicationId");

		if (oAuth2ApplicationId != null) {
			setOAuth2ApplicationId(oAuth2ApplicationId);
		}
	}

	@Override
	public String getOAuth2RefreshTokenId() {
		if (_oAuth2RefreshTokenId == null) {
			return "";
		}
		else {
			return _oAuth2RefreshTokenId;
		}
	}

	@Override
	public void setOAuth2RefreshTokenId(String oAuth2RefreshTokenId) {
		_oAuth2RefreshTokenId = oAuth2RefreshTokenId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_columnBitmask |= USERNAME_COLUMN_BITMASK;

		if (_originalUserName == null) {
			_originalUserName = _userName;
		}

		_userName = userName;
	}

	public String getOriginalUserName() {
		return GetterUtil.getString(_originalUserName);
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getLifeTime() {
		return _lifeTime;
	}

	@Override
	public void setLifeTime(long lifeTime) {
		_lifeTime = lifeTime;
	}

	@Override
	public long getOAuth2ApplicationId() {
		return _oAuth2ApplicationId;
	}

	@Override
	public void setOAuth2ApplicationId(long oAuth2ApplicationId) {
		_columnBitmask |= OAUTH2APPLICATIONID_COLUMN_BITMASK;

		if (!_setOriginalOAuth2ApplicationId) {
			_setOriginalOAuth2ApplicationId = true;

			_originalOAuth2ApplicationId = _oAuth2ApplicationId;
		}

		_oAuth2ApplicationId = oAuth2ApplicationId;
	}

	public long getOriginalOAuth2ApplicationId() {
		return _originalOAuth2ApplicationId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public OAuth2RefreshToken toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OAuth2RefreshToken)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OAuth2RefreshTokenImpl oAuth2RefreshTokenImpl = new OAuth2RefreshTokenImpl();

		oAuth2RefreshTokenImpl.setOAuth2RefreshTokenId(getOAuth2RefreshTokenId());
		oAuth2RefreshTokenImpl.setCompanyId(getCompanyId());
		oAuth2RefreshTokenImpl.setUserId(getUserId());
		oAuth2RefreshTokenImpl.setUserName(getUserName());
		oAuth2RefreshTokenImpl.setCreateDate(getCreateDate());
		oAuth2RefreshTokenImpl.setLifeTime(getLifeTime());
		oAuth2RefreshTokenImpl.setOAuth2ApplicationId(getOAuth2ApplicationId());

		oAuth2RefreshTokenImpl.resetOriginalValues();

		return oAuth2RefreshTokenImpl;
	}

	@Override
	public int compareTo(OAuth2RefreshToken oAuth2RefreshToken) {
		String primaryKey = oAuth2RefreshToken.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OAuth2RefreshToken)) {
			return false;
		}

		OAuth2RefreshToken oAuth2RefreshToken = (OAuth2RefreshToken)obj;

		String primaryKey = oAuth2RefreshToken.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		OAuth2RefreshTokenModelImpl oAuth2RefreshTokenModelImpl = this;

		oAuth2RefreshTokenModelImpl._originalUserName = oAuth2RefreshTokenModelImpl._userName;

		oAuth2RefreshTokenModelImpl._originalOAuth2ApplicationId = oAuth2RefreshTokenModelImpl._oAuth2ApplicationId;

		oAuth2RefreshTokenModelImpl._setOriginalOAuth2ApplicationId = false;

		oAuth2RefreshTokenModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OAuth2RefreshToken> toCacheModel() {
		OAuth2RefreshTokenCacheModel oAuth2RefreshTokenCacheModel = new OAuth2RefreshTokenCacheModel();

		oAuth2RefreshTokenCacheModel.oAuth2RefreshTokenId = getOAuth2RefreshTokenId();

		String oAuth2RefreshTokenId = oAuth2RefreshTokenCacheModel.oAuth2RefreshTokenId;

		if ((oAuth2RefreshTokenId != null) &&
				(oAuth2RefreshTokenId.length() == 0)) {
			oAuth2RefreshTokenCacheModel.oAuth2RefreshTokenId = null;
		}

		oAuth2RefreshTokenCacheModel.companyId = getCompanyId();

		oAuth2RefreshTokenCacheModel.userId = getUserId();

		oAuth2RefreshTokenCacheModel.userName = getUserName();

		String userName = oAuth2RefreshTokenCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			oAuth2RefreshTokenCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			oAuth2RefreshTokenCacheModel.createDate = createDate.getTime();
		}
		else {
			oAuth2RefreshTokenCacheModel.createDate = Long.MIN_VALUE;
		}

		oAuth2RefreshTokenCacheModel.lifeTime = getLifeTime();

		oAuth2RefreshTokenCacheModel.oAuth2ApplicationId = getOAuth2ApplicationId();

		return oAuth2RefreshTokenCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{oAuth2RefreshTokenId=");
		sb.append(getOAuth2RefreshTokenId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", lifeTime=");
		sb.append(getLifeTime());
		sb.append(", oAuth2ApplicationId=");
		sb.append(getOAuth2ApplicationId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.oauth2.provider.model.OAuth2RefreshToken");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>oAuth2RefreshTokenId</column-name><column-value><![CDATA[");
		sb.append(getOAuth2RefreshTokenId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lifeTime</column-name><column-value><![CDATA[");
		sb.append(getLifeTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oAuth2ApplicationId</column-name><column-value><![CDATA[");
		sb.append(getOAuth2ApplicationId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = OAuth2RefreshToken.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			OAuth2RefreshToken.class
		};
	private String _oAuth2RefreshTokenId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private String _originalUserName;
	private Date _createDate;
	private long _lifeTime;
	private long _oAuth2ApplicationId;
	private long _originalOAuth2ApplicationId;
	private boolean _setOriginalOAuth2ApplicationId;
	private long _columnBitmask;
	private OAuth2RefreshToken _escapedModel;
}