/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.security.password.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.security.password.model.PasswordMeta;
import com.liferay.portal.security.password.model.PasswordMetaModel;
import com.liferay.portal.security.password.model.PasswordMetaSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PasswordMeta service. Represents a row in the &quot;PasswordMeta&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>PasswordMetaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PasswordMetaImpl}.
 * </p>
 *
 * @author arthurchan35
 * @see PasswordMetaImpl
 * @generated
 */
@JSON(strict = true)
public class PasswordMetaModelImpl
	extends BaseModelImpl<PasswordMeta> implements PasswordMetaModel {

	/**
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a password meta model instance should use the <code>PasswordMeta</code> interface instead.
	 */
	public static final String TABLE_NAME = "PasswordMeta";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"metaId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"passwordEntryId", Types.BIGINT},
		{"hashAlgorithmEntryId", Types.BIGINT}, {"salt", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("metaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("passwordEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hashAlgorithmEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("salt", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PasswordMeta (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,metaId LONG not null primary key,createDate DATE null,modifiedDate DATE null,passwordEntryId LONG,hashAlgorithmEntryId LONG,salt VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table PasswordMeta";

	public static final String ORDER_BY_JPQL =
		" ORDER BY passwordMeta.modifiedDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PasswordMeta.modifiedDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long HASHALGORITHMENTRYID_COLUMN_BITMASK = 1L;

	public static final long PASSWORDENTRYID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long MODIFIEDDATE_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PasswordMeta toModel(PasswordMetaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PasswordMeta model = new PasswordMetaImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setUuid(soapModel.getUuid());
		model.setMetaId(soapModel.getMetaId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPasswordEntryId(soapModel.getPasswordEntryId());
		model.setHashAlgorithmEntryId(soapModel.getHashAlgorithmEntryId());
		model.setSalt(soapModel.getSalt());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PasswordMeta> toModels(PasswordMetaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PasswordMeta> models = new ArrayList<PasswordMeta>(
			soapModels.length);

		for (PasswordMetaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PasswordMetaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _metaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMetaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _metaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PasswordMeta.class;
	}

	@Override
	public String getModelClassName() {
		return PasswordMeta.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PasswordMeta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PasswordMeta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PasswordMeta, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PasswordMeta)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PasswordMeta, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PasswordMeta, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PasswordMeta)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PasswordMeta, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PasswordMeta, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PasswordMeta>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PasswordMeta.class.getClassLoader(), PasswordMeta.class,
			ModelWrapper.class);

		try {
			Constructor<PasswordMeta> constructor =
				(Constructor<PasswordMeta>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<PasswordMeta, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PasswordMeta, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PasswordMeta, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PasswordMeta, Object>>();
		Map<String, BiConsumer<PasswordMeta, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PasswordMeta, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", PasswordMeta::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<PasswordMeta, Long>)PasswordMeta::setMvccVersion);
		attributeGetterFunctions.put("uuid", PasswordMeta::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<PasswordMeta, String>)PasswordMeta::setUuid);
		attributeGetterFunctions.put("metaId", PasswordMeta::getMetaId);
		attributeSetterBiConsumers.put(
			"metaId", (BiConsumer<PasswordMeta, Long>)PasswordMeta::setMetaId);
		attributeGetterFunctions.put("createDate", PasswordMeta::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<PasswordMeta, Date>)PasswordMeta::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", PasswordMeta::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<PasswordMeta, Date>)PasswordMeta::setModifiedDate);
		attributeGetterFunctions.put(
			"passwordEntryId", PasswordMeta::getPasswordEntryId);
		attributeSetterBiConsumers.put(
			"passwordEntryId",
			(BiConsumer<PasswordMeta, Long>)PasswordMeta::setPasswordEntryId);
		attributeGetterFunctions.put(
			"hashAlgorithmEntryId", PasswordMeta::getHashAlgorithmEntryId);
		attributeSetterBiConsumers.put(
			"hashAlgorithmEntryId",
			(BiConsumer<PasswordMeta, Long>)
				PasswordMeta::setHashAlgorithmEntryId);
		attributeGetterFunctions.put("salt", PasswordMeta::getSalt);
		attributeSetterBiConsumers.put(
			"salt", (BiConsumer<PasswordMeta, String>)PasswordMeta::setSalt);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMetaId() {
		return _metaId;
	}

	@Override
	public void setMetaId(long metaId) {
		_metaId = metaId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getPasswordEntryId() {
		return _passwordEntryId;
	}

	@Override
	public void setPasswordEntryId(long passwordEntryId) {
		_columnBitmask |= PASSWORDENTRYID_COLUMN_BITMASK;

		if (!_setOriginalPasswordEntryId) {
			_setOriginalPasswordEntryId = true;

			_originalPasswordEntryId = _passwordEntryId;
		}

		_passwordEntryId = passwordEntryId;
	}

	public long getOriginalPasswordEntryId() {
		return _originalPasswordEntryId;
	}

	@JSON
	@Override
	public long getHashAlgorithmEntryId() {
		return _hashAlgorithmEntryId;
	}

	@Override
	public void setHashAlgorithmEntryId(long hashAlgorithmEntryId) {
		_columnBitmask |= HASHALGORITHMENTRYID_COLUMN_BITMASK;

		if (!_setOriginalHashAlgorithmEntryId) {
			_setOriginalHashAlgorithmEntryId = true;

			_originalHashAlgorithmEntryId = _hashAlgorithmEntryId;
		}

		_hashAlgorithmEntryId = hashAlgorithmEntryId;
	}

	public long getOriginalHashAlgorithmEntryId() {
		return _originalHashAlgorithmEntryId;
	}

	@JSON
	@Override
	public String getSalt() {
		if (_salt == null) {
			return "";
		}
		else {
			return _salt;
		}
	}

	@Override
	public void setSalt(String salt) {
		_salt = salt;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, PasswordMeta.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PasswordMeta toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PasswordMeta>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PasswordMetaImpl passwordMetaImpl = new PasswordMetaImpl();

		passwordMetaImpl.setMvccVersion(getMvccVersion());
		passwordMetaImpl.setUuid(getUuid());
		passwordMetaImpl.setMetaId(getMetaId());
		passwordMetaImpl.setCreateDate(getCreateDate());
		passwordMetaImpl.setModifiedDate(getModifiedDate());
		passwordMetaImpl.setPasswordEntryId(getPasswordEntryId());
		passwordMetaImpl.setHashAlgorithmEntryId(getHashAlgorithmEntryId());
		passwordMetaImpl.setSalt(getSalt());

		passwordMetaImpl.resetOriginalValues();

		return passwordMetaImpl;
	}

	@Override
	public int compareTo(PasswordMeta passwordMeta) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), passwordMeta.getModifiedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PasswordMeta)) {
			return false;
		}

		PasswordMeta passwordMeta = (PasswordMeta)obj;

		long primaryKey = passwordMeta.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		PasswordMetaModelImpl passwordMetaModelImpl = this;

		passwordMetaModelImpl._originalUuid = passwordMetaModelImpl._uuid;

		passwordMetaModelImpl._setModifiedDate = false;

		passwordMetaModelImpl._originalPasswordEntryId =
			passwordMetaModelImpl._passwordEntryId;

		passwordMetaModelImpl._setOriginalPasswordEntryId = false;

		passwordMetaModelImpl._originalHashAlgorithmEntryId =
			passwordMetaModelImpl._hashAlgorithmEntryId;

		passwordMetaModelImpl._setOriginalHashAlgorithmEntryId = false;

		passwordMetaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PasswordMeta> toCacheModel() {
		PasswordMetaCacheModel passwordMetaCacheModel =
			new PasswordMetaCacheModel();

		passwordMetaCacheModel.mvccVersion = getMvccVersion();

		passwordMetaCacheModel.uuid = getUuid();

		String uuid = passwordMetaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			passwordMetaCacheModel.uuid = null;
		}

		passwordMetaCacheModel.metaId = getMetaId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			passwordMetaCacheModel.createDate = createDate.getTime();
		}
		else {
			passwordMetaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			passwordMetaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			passwordMetaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		passwordMetaCacheModel.passwordEntryId = getPasswordEntryId();

		passwordMetaCacheModel.hashAlgorithmEntryId = getHashAlgorithmEntryId();

		passwordMetaCacheModel.salt = getSalt();

		String salt = passwordMetaCacheModel.salt;

		if ((salt != null) && (salt.length() == 0)) {
			passwordMetaCacheModel.salt = null;
		}

		return passwordMetaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PasswordMeta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PasswordMeta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PasswordMeta, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((PasswordMeta)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PasswordMeta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PasswordMeta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PasswordMeta, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PasswordMeta)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PasswordMeta>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private String _uuid;
	private String _originalUuid;
	private long _metaId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _passwordEntryId;
	private long _originalPasswordEntryId;
	private boolean _setOriginalPasswordEntryId;
	private long _hashAlgorithmEntryId;
	private long _originalHashAlgorithmEntryId;
	private boolean _setOriginalHashAlgorithmEntryId;
	private String _salt;
	private long _columnBitmask;
	private PasswordMeta _escapedModel;

}